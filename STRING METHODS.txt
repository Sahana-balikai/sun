JAVA STRING METHODS
1.toCharArray()=method converts the given string into a sequence of characters. The returned array length is equal to the length of the string.
Syntax :

public char[] toCharArray()   
Return : It returns a newly allocated character array.
class Sahana { 
    public static void main(String args[]) 
    { 
        String s = "Welcome"; 
        char[] = s.toCharArray(); 
        for (int i = 0; i < gfg.length; i++) { 
            System.out.println(gfg[i]); 
        } 
    } 
}

2.equals(String, String)=The equals() method of java.text.Collator class is used to check if both the strings are identical or not.
Syntax:

public boolean equals(String source,String target) 
public class Sahana { 
    public static void main(String[] argv) 
    { 
        try { 
  
            // Creating and initializing 
            // Collator Object 
            Collator col = Collator.getInstance(); 
  
            // Creating an initializing 
            // object for comparison 
            String obj1 = "a"; 
  
            // Creating an initializing 
            // Object for comparison 
            String obj2 = "A"; 
  
            // compare both object 
            // using equals() mehtod 
            boolean i = col.equals(obj1, obj2); 
  
            // display result 
            if (i) 
                System.out.println(obj1 
                                   + " is equal to "
                                   + obj2); 
            else
                System.out.println(obj1 
                                   + " is not equal to "
                                   + obj2); 
        } 
  
        catch (ClassCastException e) { 
  
            System.out.println("Exception thrown : " + e); 
        } 
    } 
} 




3.isEmpty() method=String method checks whether a String is empty or not. This method returns true if the given string is empty, else it returns false
Syntax:

public boolean isEmpty()
Returns : true if the length of the string is 0.

class Sahana { 
    public static void main(String args[]) 
    { 
        // non-empty string 
        String str1 = "Hello_Gfg"; 
  
        // empty string 
        String str2 = ""; 
  
        // prints false 
        System.out.println(str1.isEmpty()); 
  
        // prints true 
        System.out.println(str2.isEmpty()); 
    } 
} 





4.string concat()=method combines specified string at the end of this string. It returns combined string. It is like appending another string.
public String concat(String str) {  
       int otherLen = str.length();  
       if (otherLen == 0) {  
           return this;  
       }  
       int len = value.length;  
       char buf[] = Arrays.copyOf(value, len + otherLen);  
       str.getChars(buf, len);  
       return new String(buf, true);  
   }  
   
   
5.string indexOf()=method returns index of given character value or substring. If it is not found, it returns -1. The index counter starts from zero.
public class IndexOfExample2 {  
    public static void main(String[] args) {  
        String s1 = "This is indexOf method";             
        int index = s1.indexOf("method");   
        System.out.println("index of substring "+index);          
    }  
  
}



6.String toLowerCase()=method returns the string in lowercase letter. In other words, it converts all characters of the string into lower case letter.
public class StringLowerExample{  
public static void main(String args[])
{  
String s1="SAHANA";  
String s1lower=s1.toLowerCase();  
System.out.println(s1lower);  
}}  



7.String toUpperCase()=method returns the string in uppercase letter. In other words, it converts all characters of the string into upper case letter.
public class StringUpperExample{  
public static void main(String args[])
{  
String s1="hello string";  
String s1upper=s1.toUpperCase();  
System.out.println(s1upper);  
}}   


8.String trim()=java string trim() method eliminates leading and trailing spaces. The unicode value of space character is '\u0020'. The trim() method in java string checks this unicode value before and after the string, if it exists then removes the spaces and returns the omitted string.
public class StringTrimExample{  
public static void main(String args[])
{  
String s1="  hello string   ";  
System.out.println(s1+"sahana");//without trim()  
System.out.println(s1.trim()+"sahana");//with trim()  
}}   